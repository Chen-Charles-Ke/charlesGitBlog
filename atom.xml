<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://charlesongitee.gitee.io/charles-blog/atom.xml" rel="self"/>
  
  <link href="https://charlesongitee.gitee.io/charles-blog/"/>
  <updated>2021-11-29T13:02:24.609Z</updated>
  <id>https://charlesongitee.gitee.io/charles-blog/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS Concurrency Section 1</title>
    <link href="https://charlesongitee.gitee.io/charles-blog/2021/11/28/ConcurrencySection1/"/>
    <id>https://charlesongitee.gitee.io/charles-blog/2021/11/28/ConcurrencySection1/</id>
    <published>2021-11-28T12:49:20.000Z</published>
    <updated>2021-11-29T13:02:24.609Z</updated>
    
    <content type="html"><![CDATA[<p>Each of us is smartphone user, thinking about one thing, when will you feel like “oh shit this app too slow” on some apps ?  i guess, lets say there is a <code>next</code> button and the screen stutter there like 1 sec after you tap it. In this article and subsequent series of articles, lets start learning how to build an App which is “no shit”.</p><h4 id="What-is-concurrency"><a href="#What-is-concurrency" class="headerlink" title="What is concurrency?"></a>What is concurrency?</h4><p>Wikipedia defines concurrency as </p><blockquote><p>the decomposability property of a program, algorithm, or problem into order-independent or partially-ordered components or units.</p></blockquote><p>Well I know every word above but when they are put together I don’t understand at all.</p><p>Before concurrency, lets introduce some a few concepts.</p><ul><li><h6 id="Synchronous-and-Asynchronous"><a href="#Synchronous-and-Asynchronous" class="headerlink" title="Synchronous and Asynchronous"></a>Synchronous and Asynchronous</h6></li></ul><p>When we talk about thread execution, synchronous and asynchronous are the most basic set of concepts in this topic. Synchronous operation means that the thread running the operation will be occupied before the operation is completed. Until the function is finally thrown or returned.</p><p>Before swift 5.5, all the func in swift is synchronus func, lets give a example func.</p><blockquote><p>some of you guys might know that swift 5.5 bring us a new concurrency await/async systerm, we are not start learing concurrency from this because it will be long time we able to introduce it to production level project. but i will write some chapter of “new concurrency” at end of this topic. Dont worry about you are wasting your time to learn outdated knowledge, In fact, this knowledge is the necessary foundation, otherwise you will feel very confused when learning new concepts.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> results: [<span class="type">String</span>] <span class="operator">=</span> []</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addAppending</span>(<span class="keyword">_</span> <span class="params">value</span>: <span class="type">String</span>, <span class="params">to</span> <span class="params">string</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">    results.append(value.appending(string))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AddAppending</code> is a synchronous function. Before it returns, the thread running it will not be able to perform other operations, or it cannot be used to run other functions. It must wait for the current function to complete before the thread can do other things.</p><div align="center">  <img src="https://cdn.jsdelivr.net/gh/Chen-Charles-Ke/charlesImageHosting@master/20211129/concurrency1.3t388pu3dd80.png" unselectable="on" style="background:none; border:none; pointer-events:none; cursor:default; box-shadow:none;"></div><p>In iOS development, we build the screen with UIKit or SwiftUI,which is not thread-safe: the processing of user input and the drawing of the UI must be performed in the main runloop bound to the main thread. Suppose we want The user interface runs at a rate of 60 frames per second, so the processing time allowed between each two draws in the main thread is only 16 milliseconds (1/60s) at most. When other operations to be synchronized in the main thread are time-consuming Less time (such as our addAppending, which may take only tens of nanoseconds), this will not cause any problems. However, if this synchronization operation takes too long, the main thread will be blocked. It cannot accept user input, and Unable to submit a request to the GPU to draw a new UI, which will cause the user interface to drop frames or even freeze. This kind of “long time-consuming” operation is actually very common, such as:</p><ul><li>receiving data from a network request</li><li>loading one large files from disk </li><li>complex encryption and decryption operations</li></ul><p>Lets give another example of this, we have a <code>loadSignature</code> func which can read signature from remote service, and this operation will performe in the  main thread, as well as it spend more than 16 milliseconds, which is cause main thread wont handle other operations, UI wont refresh.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadSignature</span>()</span> <span class="keyword">throws</span> -&gt; <span class="type">String</span>? &#123;</span><br><span class="line">    <span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">try</span> <span class="type">Data</span>(contentsOf: someURL)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">String</span>(data: data, encoding: .utf8)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center">  <img src="https://cdn.jsdelivr.net/gh/Chen-Charles-Ke/charlesImageHosting@master/20211129/concurrency2.56rfm42c4jg0.png" unselectable="on" style="background:none; border:none; pointer-events:none; cursor:default; box-shadow:none;"></div><p>In the user’s perception, it will appear as dropped frames or the entire screen stuck. This is one of the problems that must be avoided in client development.</p><p>The most common way to solve this problem was to convert time-consuming synchronous operations into asynchronous operations: put the actual long-running tasks in another thread (or background thread) to run, and then at the end of the operation Provide callbacks running on the main thread for UI operations</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadSignature</span>(<span class="keyword">_</span> <span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">String</span>?, <span class="type">Error</span>?) -&gt; <span class="type">Void</span>)</span> &#123;</span><br><span class="line">    <span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> d <span class="operator">=</span> <span class="keyword">try</span> <span class="type">Data</span>(contentsOf: someURL)</span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                completion(<span class="type">String</span>(data: d, encoding: .utf8), <span class="literal">nil</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                completion(<span class="literal">nil</span>, error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center">  <img src="https://cdn.jsdelivr.net/gh/Chen-Charles-Ke/charlesImageHosting@master/20211129/concurrency3.si7hjlzm634.png" unselectable="on" style="background:none; border:none; pointer-events:none; cursor:default; box-shadow:none;"></div><p>We call the act of loading data in a background thread as <code>asynchronous</code> operation.  </p><ul><li><h6 id="Serial-and-Parallel"><a href="#Serial-and-Parallel" class="headerlink" title="Serial and Parallel"></a>Serial and Parallel</h6></li></ul><p>For the synchronization operations performed by the synchronization method, these operations must occur in the same thread in a serial manner. “Finish one thing, and then proceed to the next thing” is the most common, and the easiest way for humans to understand code execution.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> signature <span class="operator">=</span> <span class="keyword">try</span> loadSignature() &#123;</span><br><span class="line">    addAppending(signature, to: <span class="string">&quot;some data&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(results)</span><br></pre></td></tr></table></figure><p><code>loadSignature</code>, <code>addAppending</code>, and <code>print</code> are called sequentially, and they occur in strict order in the same thread. We call this execution as <code>serial</code>.</p><div align="center">  <img src="https://cdn.jsdelivr.net/gh/Chen-Charles-Ke/charlesImageHosting@master/20211129/concurrency4.4ghs9x5ffyi0.png" unselectable="on" style="background:none; border:none; pointer-events:none; cursor:default; box-shadow:none;"></div><p>The synchronous operation performed by the synchronous method is a sufficient but not necessary condition for serial. Asynchronous operations may also be executed serially. Suppose that in addition to loadSignature(_:), we also have a function that reads a series of data from the database. It uses a similar method to put specific work on other threads for asynchronous execution:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“<span class="function"><span class="keyword">func</span> <span class="title">loadFromDatabase</span>(<span class="keyword">_</span> <span class="params">completion</span>: <span class="keyword">@escaping</span> ([<span class="type">String</span>]<span class="operator">?</span>, <span class="type">Error</span>?) -&gt; <span class="type">Void</span>)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we first read the data from the database, and then use loadSignature to get the signature from the network after completion, and finally append the signature to each string retrieved from the database, we can write:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">loadFromDatabase &#123; (strings, error) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> strings <span class="operator">=</span> strings &#123;</span><br><span class="line">        loadSignature &#123; signature, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> signature <span class="operator">=</span> signature &#123;</span><br><span class="line">                strings.forEach &#123;</span><br><span class="line">                    addAppending(signature, to: <span class="variable">$0</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Although these operations are asynchronous, they (read [String] from the database, download the signature from the network, and finally add the signature to each piece of data) are still serial, and the loading of the signature must happen after the database is read. And the final addAppending must also happen after loadSignature.</p><div align="center">  <img src="https://cdn.jsdelivr.net/gh/Chen-Charles-Ke/charlesImageHosting@master/20211129/concurrency5.7c8pzri39ro0.png" unselectable="on" style="background:none; border:none; pointer-events:none; cursor:default; box-shadow:none;"></div><p>In fact, although the final addAppending task requires both the original data and the signature to proceed, there is actually no dependency between loadFromDatabase and loadSignature. If they can be executed together, our program has a high chance of becoming faster. At this time, we will need more threads to perform two operations at the same time and we can replace the serial calls with parallel calls.</p><p>The two load methods start working at the same time. In theory, if the resources are sufficient (enough CPU, network bandwidth, etc.)</p><blockquote><p>Moderns devices almost always have more than a single CPU, and Apple’s iPhones have been dual core since 2011. Having more than one core means they are capable of running more than a single task at the same time. By splitting your app into logical “chunks” of code you enable the iOS device to run multiple parts of your program at the same time, thus improving overall performance.</p></blockquote><p>And time they consume will now be less than the sum of the two in serial.</p><div align="center">  <img src="https://cdn.jsdelivr.net/gh/Chen-Charles-Ke/charlesImageHosting@master/20211129/concurrency6.58eifq0gpt40.png" unselectable="on" style="background:none; border:none; pointer-events:none; cursor:default; box-shadow:none;"></div><p>the two asynchronous operations, <code>loadFromDatabase</code> and <code>loadSignature</code>, are executed simultaneously in different threads. For this way of having multiple sets of resources executed at the same time, we call it as <code>parallel</code>.</p><p>Last, I would like give you the final anwser of “what is concurrency”:</p><blockquote><p>Concurrency = a combination of asynchronous and parallel code</p></blockquote><h4 id="how-to-use-concurrency"><a href="#how-to-use-concurrency" class="headerlink" title="how to use concurrency?"></a>how to use concurrency?</h4><ul><li><h6 id="GCD-and-Operation"><a href="#GCD-and-Operation" class="headerlink" title="GCD and Operation"></a>GCD and Operation</h6></li></ul><p>there are two main ways that iOS provides you with the ability to run code concurrently.</p><ul><li>Grand Central Dispatch (GCD)</li><li>Operation</li></ul><blockquote><p>GCD is Apple’s implementation of C’s libdispatch library. Its purpose is to queue up tasks — either a method or a closure — that can be run in parallel, depending on availability of resources; it then executes the tasks on an available processor core.</p></blockquote><p>As a developer, you needent worry about how to manage thread yourself, GCD will help you do that through only 15 instructions. All of the tasks that GCD manages for you are placed into GCD-managed first-in, first-out (FIFO) queues. Each task that you submit to a queue is then executed against a pool of threads fully managed by the system.</p><p>and GCD makes running async task very simple via closures with few lines of code:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Class level variable</span></span><br><span class="line"><span class="keyword">let</span> queue <span class="operator">=</span> <span class="type">DispatchQueue</span>(label: <span class="string">&quot;charlesLabel&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Somewhere in your function</span></span><br><span class="line">queue.async &#123;</span><br><span class="line">  <span class="comment">// Call slow non-UI methods here</span></span><br><span class="line">  </span><br><span class="line">  <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">    <span class="comment">// Update the UI here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Operations are fully-functional classes that can be submitted to an OperationQueue, just like you’d submit a closure of work to a DispatchQueue for GCD. Because they’re classes and can contain variables, you gain the ability to know what state the operation is in at any given point.</p><p>Operations can exist in any of the following states:</p><ul><li><p>isReady</p></li><li><p>isExecuting</p></li><li><p>isCancelled</p></li><li><p>isFinished</p></li><li><h6 id="Which-should-you-use"><a href="#Which-should-you-use" class="headerlink" title="Which should you use?"></a>Which should you use?</h6></li></ul><p>There’s no clear-cut directive as to whether you should use GCD or Operations in your app. GCD tends to be simpler to work with for simple tasks you just need to execute and forget. Operations provide much more functionality when you need to keep track of a job or maintain the ability to cancel it.</p><p>In the next section, i will take you go through more about GCD. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Each of us is smartphone user, thinking about one thing, when will you feel like “oh shit this app too slow” on some apps ?  i guess, let</summary>
      
    
    
    
    <category term="Swift Notebook" scheme="https://charlesongitee.gitee.io/charles-blog/categories/Swift-Notebook/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift UI Component - Segemented Picker</title>
    <link href="https://charlesongitee.gitee.io/charles-blog/2021/11/13/tabBar/"/>
    <id>https://charlesongitee.gitee.io/charles-blog/2021/11/13/tabBar/</id>
    <published>2021-11-13T12:49:20.000Z</published>
    <updated>2021-11-16T04:47:33.671Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Preface"><a href="#Preface" class="headerlink" title="Preface:"></a>Preface:</h5><p>You will not be unfamiliar with Segemented Picker, or the tab bar selector, its a common component. Generally we can switch to another screen/view by tapping the different tab index. </p><p>But the problem we facing is, there are different design types of your segemented picker, in order to maintain the uniform style of design screen elements, your designer will ask you build several different-looking components which have same funtionality.  </p><p>such as:  </p><ul><li>picker has underline</li><li>picker has marker state</li><li>tab type picker</li><li>different background color picker</li></ul><p>Today i will walk though you to build a extensible component that will never let your desinger trouble you again.  lets start it!</p><h5 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation:"></a>Implementation:</h5><h6 id="Step1-Lets-write-a-enum-to-define-all-the-segemented-control-types-we-might-need"><a href="#Step1-Lets-write-a-enum-to-define-all-the-segemented-control-types-we-might-need" class="headerlink" title="Step1. Lets write a enum to define all the segemented control types we might need."></a>Step1. Lets write a enum to define all the segemented control types we might need.</h6><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SegementedControlType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> underline</span><br><span class="line">    <span class="keyword">case</span> tab</span><br><span class="line">    <span class="keyword">case</span> blackRoundTab</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Step2-Input-for-segemented-control"><a href="#Step2-Input-for-segemented-control" class="headerlink" title="Step2. Input for segemented control."></a>Step2. Input for segemented control.</h6><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">SegmentedTabContent</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// Segment tab text</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line">    <span class="comment">/// Segment tab red marker end of text</span></span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">public</span> <span class="keyword">var</span> markerState: <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Init segmentedTabContent</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">init</span>(<span class="params">text</span>: <span class="type">String</span>, <span class="params">markerState</span>: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt; <span class="operator">=</span> .constant(<span class="literal">false</span>))</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.text <span class="operator">=</span> text</span><br><span class="line">        _markerState <span class="operator">=</span> markerState</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>text</code> which type is <code>String</code> will as the label name displaying over somewhere, and we give a tag <code>makerState</code> here to show the red maker(which represents unread status) or not.</p><p>Before next step, id like to write a segmented control configuration typealias for convenience.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">SegmentedControlConfiguration</span> <span class="operator">=</span> (textColor: <span class="type">Color</span>, selectTextColor: <span class="type">Color</span>)</span><br></pre></td></tr></table></figure><p><code>textColor</code> is the tab label color and <code>selectTextColor</code> is the tab selected color.</p><h6 id="Step3-Lets-start-working-on-the-View-stuff"><a href="#Step3-Lets-start-working-on-the-View-stuff" class="headerlink" title="Step3. Lets start working on the View stuff."></a>Step3. Lets start working on the View stuff.</h6><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">SegmentedControl</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MARK: - Private fields</span></span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">private</span> <span class="keyword">var</span> selection: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> items: [<span class="type">SegmentedTabContent</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isFullWidth: <span class="type">Bool</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> sizes: [<span class="type">Int</span>: <span class="type">CGSize</span>] <span class="operator">=</span> [:]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> type: <span class="type">SegmentedControlType</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> onSelect: ((<span class="type">SegmentedTabContent</span>, <span class="type">Int</span>) -&gt; <span class="type">Void</span>)<span class="operator">?</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> configuration <span class="operator">=</span> <span class="type">SegmentedControlConfiguration</span>(textColor: <span class="type">Color</span>(.gray), selectTextColor: <span class="type">Color</span>(.black))</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> scrollEnable: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> spacingBetweenItem: <span class="type">CGFloat</span> &#123;</span><br><span class="line">        type <span class="operator">==</span> .underline</span><br><span class="line">            <span class="operator">?</span> <span class="number">30</span></span><br><span class="line">            : <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> offsetX: <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> totalWidth: <span class="type">CGFloat</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> selection &#123;</span><br><span class="line">            totalWidth <span class="operator">+=</span> sizes[idx]<span class="operator">?</span>.width <span class="operator">??</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalWidth <span class="operator">+</span> (<span class="type">CGFloat</span>(selection) <span class="operator">*</span> spacingBetweenItem)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> contentLineBackground: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>()</span><br><span class="line">            .fill(<span class="type">Color</span>(.black))</span><br><span class="line">            .frame(</span><br><span class="line">                width: sizes[selection]<span class="operator">?</span>.width <span class="operator">??</span> <span class="number">0</span>,</span><br><span class="line">                height: <span class="number">2.0</span></span><br><span class="line">            )</span><br><span class="line">            .offset(x: offsetX)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> contentTabBackground: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>()</span><br><span class="line">            .fill(<span class="type">Color</span>(.white))</span><br><span class="line">            .frame(</span><br><span class="line">                width: sizes[selection]<span class="operator">?</span>.width <span class="operator">??</span> <span class="number">0</span>,</span><br><span class="line">                height: <span class="number">30</span></span><br><span class="line">            )</span><br><span class="line">            .cornerRadius(<span class="number">10</span>)</span><br><span class="line">            .shadow(</span><br><span class="line">                color: <span class="type">Color</span>.black.opacity(<span class="number">0.05</span>),</span><br><span class="line">                radius: <span class="number">4</span></span><br><span class="line">            )</span><br><span class="line">            .offset(x: offsetX)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> contentBlackTabBackground: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>()</span><br><span class="line">            .fill(<span class="type">Color</span>(.black).opacity(<span class="number">0.5</span>))</span><br><span class="line">            .frame(</span><br><span class="line">                width: sizes[selection]<span class="operator">?</span>.width <span class="operator">??</span> <span class="number">0</span>,</span><br><span class="line">                height: <span class="number">28</span></span><br><span class="line">            )</span><br><span class="line">            .cornerRadius(<span class="number">14</span>)</span><br><span class="line">            .shadow(</span><br><span class="line">                color: <span class="type">Color</span>.black.opacity(<span class="number">0.05</span>),</span><br><span class="line">                radius: <span class="number">4</span></span><br><span class="line">            )</span><br><span class="line">            .offset(x: offsetX)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MARK: - Private methods</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">itemView</span>(<span class="params">index</span>: <span class="type">Int</span>)</span> -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> foregroundColor <span class="operator">=</span> selection <span class="operator">==</span> index <span class="operator">?</span> configuration.selectTextColor : configuration.textColor</span><br><span class="line">        <span class="keyword">let</span> paddingHorizontal: <span class="type">CGFloat</span></span><br><span class="line">            <span class="operator">=</span> (type <span class="operator">==</span> .underline <span class="operator">||</span> type <span class="operator">==</span> .titleUnderline) <span class="operator">?</span> <span class="number">0.0</span> : <span class="number">10.0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="type">ZStack</span> &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">                <span class="type">Text</span>(items[index].text)</span><br><span class="line">                    .kerning(<span class="number">0.6</span>)</span><br><span class="line">                    .font(.system(size: <span class="number">12</span>, weight: .medium))</span><br><span class="line">                    .foregroundColor(foregroundColor)</span><br><span class="line">                    .lineLimit(<span class="number">1</span>)</span><br><span class="line">                    .padding(.horizontal, paddingHorizontal)</span><br><span class="line">                    .overlay(</span><br><span class="line">                        <span class="type">Circle</span>()</span><br><span class="line">                            .strokeBorder(<span class="type">Color</span>(.white), lineWidth: <span class="number">1</span>)</span><br><span class="line">                            .background(<span class="type">Circle</span>().foregroundColor(<span class="type">Color</span>(.red)))</span><br><span class="line">                            .frame(width: <span class="number">9</span>, height: <span class="number">9</span>)</span><br><span class="line">                            .opacity(items[index].markerState <span class="operator">?</span> <span class="number">1</span> : <span class="number">0</span>)</span><br><span class="line">                            .offset(x: <span class="number">9</span>, y: <span class="operator">-</span><span class="number">9</span>),</span><br><span class="line">                        alignment: .topTrailing</span><br><span class="line">                    )</span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            .frame(maxWidth: .none)</span><br><span class="line">            .background(</span><br><span class="line">                <span class="type">VStack</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> index <span class="operator">==</span> selection <span class="operator">&amp;&amp;</span> type <span class="operator">==</span> .titleUnderline &#123;</span><br><span class="line">                        <span class="type">Spacer</span>()</span><br><span class="line">                        <span class="type">Rectangle</span>()</span><br><span class="line">                            .fill(<span class="type">Color</span>(.black))</span><br><span class="line">                                .frame(height: <span class="number">2</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(maxWidth: isFullWidth <span class="operator">?</span> .infinity : .none, maxHeight: .infinity)</span><br><span class="line">        .contentShape(<span class="type">Rectangle</span>())</span><br><span class="line">        .background(</span><br><span class="line">            <span class="type">GeometryReader</span> &#123; geo -&gt; <span class="type">Color</span> <span class="keyword">in</span></span><br><span class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                    sizes[index] <span class="operator">=</span> geo.frame(in: .global).size</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="type">Color</span>.clear</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        .onTapGesture &#123;</span><br><span class="line">            withAnimation &#123;</span><br><span class="line">                selection <span class="operator">=</span> index</span><br><span class="line">                <span class="keyword">self</span>.onSelect<span class="operator">?</span>(items[index], index)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MARK: - Initializer</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Init.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">init</span>(</span></span><br><span class="line"><span class="function">        <span class="params">type</span>: <span class="type">SegmentedControlType</span> <span class="operator">=</span> .underline,</span></span><br><span class="line"><span class="function">        <span class="params">selection</span>: <span class="type">Binding</span>&lt;<span class="type">Int</span>&gt; <span class="operator">=</span> .constant(<span class="number">0</span>),</span></span><br><span class="line"><span class="function">        <span class="params">items</span>: [<span class="type">SegmentedTabContent</span>],</span></span><br><span class="line"><span class="function">        <span class="params">isFullWidth</span>: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span>,</span></span><br><span class="line"><span class="function">        <span class="params">onSelectTab</span>: ((<span class="type">SegmentedTabContent</span>, <span class="type">Int</span>) -&gt; <span class="type">Void</span>)<span class="operator">?</span> <span class="operator">=</span> <span class="literal">nil</span>,</span></span><br><span class="line"><span class="function">        <span class="params">configuration</span>: <span class="type">SegmentedControlConfiguration</span>? <span class="operator">=</span> <span class="literal">nil</span>,</span></span><br><span class="line"><span class="function">        <span class="params">scrollEnable</span>: <span class="type">Bool</span>? <span class="operator">=</span> <span class="literal">false</span></span></span><br><span class="line"><span class="function">    )</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.type <span class="operator">=</span> type</span><br><span class="line">        _selection <span class="operator">=</span> selection</span><br><span class="line">        <span class="keyword">self</span>.items <span class="operator">=</span> items</span><br><span class="line">        <span class="keyword">self</span>.isFullWidth <span class="operator">=</span> isFullWidth</span><br><span class="line">        onSelect <span class="operator">=</span> onSelectTab</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> config <span class="operator">=</span> configuration &#123;</span><br><span class="line">            <span class="keyword">self</span>.configuration <span class="operator">=</span> config</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> scroll <span class="operator">=</span> scrollEnable &#123;</span><br><span class="line">            <span class="keyword">self</span>.scrollEnable <span class="operator">=</span> scroll</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// content</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">content</span>()</span> -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span>(spacing: spacingBetweenItem) &#123;</span><br><span class="line">            <span class="type">ForEach</span>(items.indices, id: \.<span class="keyword">self</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                itemView(index: index)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .padding(.top, <span class="number">3</span>)</span><br><span class="line">        .background(</span><br><span class="line">            <span class="type">ZStack</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> type <span class="operator">==</span> .underline &#123;</span><br><span class="line">                    contentLineBackground</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> type <span class="operator">==</span> .tab &#123;</span><br><span class="line">                    contentTabBackground</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> type <span class="operator">==</span> .blackRoundTab &#123;</span><br><span class="line">                    contentBlackTabBackground</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            alignment: type <span class="operator">==</span> .underline <span class="operator">?</span> .bottomLeading : .leading</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Body.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(alignment: .leading, spacing: <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> scrollEnable &#123;</span><br><span class="line">                <span class="type">ScrollView</span>(.horizontal) &#123;</span><br><span class="line">                    content()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                content()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(maxHeight: .infinity)</span><br><span class="line">        .frame(height: <span class="number">44</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Demonstration"><a href="#Demonstration" class="headerlink" title="Demonstration:"></a>Demonstration:</h5><img src="https://cdn.jsdelivr.net/gh/Chen-Charles-Ke/charlesImageHosting@master/20211114/Segemented.50pmq7tjfp80.png" height="700" width="375" unselectable="on" style="background:none; border:none; pointer-events:none; cursor:default; box-shadow:none;">]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface:&quot;&gt;&lt;/a&gt;Preface:&lt;/h5&gt;&lt;p&gt;You will not be unfamiliar with Segemented Picke</summary>
      
    
    
    
    <category term="Swift UI Component" scheme="https://charlesongitee.gitee.io/charles-blog/categories/Swift-UI-Component/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift Notebook - @ViewBuilder</title>
    <link href="https://charlesongitee.gitee.io/charles-blog/2021/11/12/viewBuilder/"/>
    <id>https://charlesongitee.gitee.io/charles-blog/2021/11/12/viewBuilder/</id>
    <published>2021-11-12T13:49:20.000Z</published>
    <updated>2021-11-16T05:18:42.076Z</updated>
    
    <content type="html"><![CDATA[<p>Alright, id say if you want to use @ViewBuilder, I ventured infer that the basic swiftUI elements and components can no longer meet the complex requirements or customization requirements of your project. We need to DIY the more extensible view.  </p><p>Today, let’s take a good look at this @ViewBuilder</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span>&#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Very simple hello world level swiftUI code huh? as all we know, in the world of swiftUI, everything is a view, but have you ever thought about why we put two text views in hstack, so they can be aligned horizontally, and why hstack can accept two views?   </p><p>Let’s click into hstack’s definition to have a look:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@inlinable</span> <span class="keyword">public</span> <span class="function"><span class="keyword">init</span>(</span></span><br><span class="line"><span class="function">    <span class="params">alignment</span>: <span class="type">VerticalAlignment</span> <span class="operator">=</span> .center,</span></span><br><span class="line"><span class="function">    <span class="params">spacing</span>: <span class="type">CGFloat</span>? <span class="operator">=</span> <span class="literal">nil</span>,</span></span><br><span class="line"><span class="function">    <span class="meta">@ViewBuilder</span> <span class="params">content</span>: () -&gt; <span class="type">Content</span></span></span><br><span class="line"><span class="function">)</span></span><br></pre></td></tr></table></figure><p>From the source code, we can see that there is a closure content modified by @Viewbuilder in the init method, which means that the expression inside the closure needs to be processed by @Viewbuilder. How to handle it? When compiling the closure decorated by @Viewbuilder, swift will first try to find the static buildblock method in the @Viewbuilder structure. This method has two views as parameters. </p><p>Let’s take a look first:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">13.0</span>, OSX <span class="number">10.15</span>, <span class="keyword">tvOS</span> <span class="number">13.0</span>, <span class="keyword">watchOS</span> <span class="number">6.0</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">buildBlock</span>&lt;<span class="type">C0</span>, <span class="type">C1</span>&gt;(<span class="keyword">_</span> <span class="params">c0</span>: <span class="type">C0</span>, <span class="keyword">_</span> <span class="params">c1</span>: <span class="type">C1</span>)</span> -&gt; <span class="type">TupleView</span>&lt;(<span class="type">C0</span>, <span class="type">C1</span>)&gt; <span class="keyword">where</span> <span class="type">C0</span> : <span class="type">View</span>, <span class="type">C1</span> : <span class="type">View</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From the source code of this viewbuilder, we can see that it receives two views as input parameters and returns a tupleview combined with two views.<br>If you read the source code, you will find other statements:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">13.0</span>, <span class="keyword">macOS</span> <span class="number">10.15</span>, <span class="keyword">tvOS</span> <span class="number">13.0</span>, <span class="keyword">watchOS</span> <span class="number">6.0</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">buildBlock</span>&lt;<span class="type">C0</span>, <span class="type">C1</span>, <span class="type">C2</span>, <span class="type">C3</span>, <span class="type">C4</span>, <span class="type">C5</span>, <span class="type">C6</span>, <span class="type">C7</span>, <span class="type">C8</span>, <span class="type">C9</span>&gt;(<span class="keyword">_</span> <span class="params">c0</span>: <span class="type">C0</span>, <span class="keyword">_</span> <span class="params">c1</span>: <span class="type">C1</span>, <span class="keyword">_</span> <span class="params">c2</span>: <span class="type">C2</span>, <span class="keyword">_</span> <span class="params">c3</span>: <span class="type">C3</span>, <span class="keyword">_</span> <span class="params">c4</span>: <span class="type">C4</span>, <span class="keyword">_</span> <span class="params">c5</span>: <span class="type">C5</span>, <span class="keyword">_</span> <span class="params">c6</span>: <span class="type">C6</span>, <span class="keyword">_</span> <span class="params">c7</span>: <span class="type">C7</span>, <span class="keyword">_</span> <span class="params">c8</span>: <span class="type">C8</span>, <span class="keyword">_</span> <span class="params">c9</span>: <span class="type">C9</span>)</span> -&gt; <span class="type">TupleView</span>&lt;(<span class="type">C0</span>, <span class="type">C1</span>, <span class="type">C2</span>, <span class="type">C3</span>, <span class="type">C4</span>, <span class="type">C5</span>, <span class="type">C6</span>, <span class="type">C7</span>, <span class="type">C8</span>, <span class="type">C9</span>)&gt; <span class="keyword">where</span> <span class="type">C0</span> : <span class="type">View</span>, <span class="type">C1</span> : <span class="type">View</span>, <span class="type">C2</span> : <span class="type">View</span>, <span class="type">C3</span> : <span class="type">View</span>, <span class="type">C4</span> : <span class="type">View</span>, <span class="type">C5</span> : <span class="type">View</span>, <span class="type">C6</span> : <span class="type">View</span>, <span class="type">C7</span> : <span class="type">View</span>, <span class="type">C8</span> : <span class="type">View</span>, <span class="type">C9</span> : <span class="type">View</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>What is tupleview?</p><blockquote><p>Tupleview is a view created from a quick tuple of view values. Tupleview has no logic inside. It only keeps the view. Tupleview is completely transparent and behaves like its parent view. This means that when you put it into hstack, tupleview will place the view from tuples horizontally.</p></blockquote><p>Alright, now that we understand the role of @Viewbuilder, let’s think about how to use it.</p><p>Suppose we want to do notification function for our app. First, we think that this notification should be componentized, but the content of our notification should be diversified and customized. oh yeah, we can use @Viewbuilder.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NotificationView</span>&lt;<span class="title">Content</span>: <span class="title">View</span>&gt;: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content: <span class="type">Content</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="meta">@ViewBuilder</span> <span class="params">content</span>: () -&gt; <span class="type">Content</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.content <span class="operator">=</span> content()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        content</span><br><span class="line">            .padding()</span><br><span class="line">            .background(<span class="type">Color</span>(.tertiarySystemBackground))</span><br><span class="line">            .cornerRadius(<span class="number">16</span>)</span><br><span class="line">            .transition(.move(edge: .top))</span><br><span class="line">            .animation(.spring())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We build a notificationview here. In this view, we draw the basic style of notification, but the type of content is a closure decorated by @Viewbuilder. This lays a foundation for us to customize the push content later.</p><p>When we want to use this notificationview, we can:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> notificationShown <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.notificationShown &#123;</span><br><span class="line">                <span class="type">NotificationView</span> &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;notification&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line"></span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;toggle&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">self</span>.notificationShown.toggle()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Alright, id say if you want to use @ViewBuilder, I ventured infer that the basic swiftUI elements and components can no longer meet the c</summary>
      
    
    
    
    <category term="Swift Notebook" scheme="https://charlesongitee.gitee.io/charles-blog/categories/Swift-Notebook/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift Utility Component - UserDefaults</title>
    <link href="https://charlesongitee.gitee.io/charles-blog/2021/11/12/userDefaults/"/>
    <id>https://charlesongitee.gitee.io/charles-blog/2021/11/12/userDefaults/</id>
    <published>2021-11-12T12:49:20.000Z</published>
    <updated>2021-11-15T15:57:56.461Z</updated>
    
    <content type="html"><![CDATA[<p>Build a mature utility class can store &amp; read &amp; delete local cashed defaults.                           </p><h4 id="Preface："><a href="#Preface：" class="headerlink" title="Preface："></a>Preface：</h4><p>we always facing requirements from business team/PO in the daily development work, which like following cases :</p><p>a). when customer login back after exsiting App, login screen username expected as profile name or nickname.</p><p>b). lets say there is a screen has carousel cards , or the muti-view component, customer logout from this screen with a specsific indicator index, we are expected back to same card indicator or specific view after customer next logon.</p><p>…</p><h4 id="Analysis："><a href="#Analysis：" class="headerlink" title="Analysis："></a>Analysis：</h4><p>For the above business scenarios, we need to store the user’s login name, and passing the index of the current view into userdefaults when exiting the app, then read the stored key value after opening App.</p><p>So, Its time to build a completely, flexibility, Out-of-the-box userDefaults utility.</p><h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation:"></a>Implementation:</h4><h5 id="Step1-we-build-a-Class-that-represents-user-actions-UserAction-swift"><a href="#Step1-we-build-a-Class-that-represents-user-actions-UserAction-swift" class="headerlink" title="Step1, we build a Class that represents user actions UserAction.swift"></a>Step1, we build a Class that represents user actions <code>UserAction.swift</code></h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">UserAction</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> firstLogin</span><br><span class="line">    <span class="keyword">case</span> indicatorIndex</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> name: <span class="type">Stirng</span> &#123;</span><br><span class="line">        rawValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>here we define a enum struct which type is <code>String</code> , and give a <code>name</code> as the key value we will pass to <code>UserDefault</code> later.</p><h5 id="Step2-we-define-a-DataStore-protocol-class-which-conform-to-this-protocl-expected-overwrite-the-function-methods-write-read-delete-inside-the-protocol"><a href="#Step2-we-define-a-DataStore-protocol-class-which-conform-to-this-protocl-expected-overwrite-the-function-methods-write-read-delete-inside-the-protocol" class="headerlink" title="Step2, we define a DataStore protocol, class which conform to this protocl expected overwrite the function methods(write, read, delete) inside the protocol."></a>Step2, we define a <code>DataStore</code> protocol, class which conform to this protocl expected overwrite the function methods(write, read, delete) inside the protocol.</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">DataStore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">read</span>&lt;<span class="type">T</span>: <span class="type">Decodable</span>&gt;(<span class="keyword">_</span> <span class="params">key</span>: <span class="type">String</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">T</span>?, <span class="type">Error</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">write</span>&lt;<span class="type">T</span>: <span class="type">Encodable</span>&gt;(<span class="keyword">_</span> <span class="params">key</span>: <span class="type">String</span>, <span class="params">value</span>: <span class="type">T</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Void</span>, <span class="type">Error</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">delete1</span>(<span class="keyword">_</span> <span class="params">key</span>: <span class="type">String</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Void</span>, <span class="type">Error</span>&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>you may noticed that above three methods will return a new <code>publisher</code>.</p><h5 id="Step3-we-need-a-UserDefaultsStore-swift-class-to-conform-this-protocol"><a href="#Step3-we-need-a-UserDefaultsStore-swift-class-to-conform-this-protocol" class="headerlink" title="Step3, we need a UserDefaultsStore.swift class to conform this protocol."></a>Step3, we need a <code>UserDefaultsStore.swift</code> class to conform this protocol.</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDefaultsStore</span>: <span class="title">DataStore</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> userDefaults: <span class="type">UserDefaults</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> decoder: <span class="type">JSONDecoder</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> encoder: <span class="type">JSONEncoder</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">init</span>(</span></span><br><span class="line"><span class="function">        <span class="params">userDefaults</span>: <span class="type">UserDefaults</span>,</span></span><br><span class="line"><span class="function">        <span class="params">decoder</span>: <span class="type">JSONDecoder</span>,</span></span><br><span class="line"><span class="function">        <span class="params">encoder</span>: <span class="type">JSONEncoder</span></span></span><br><span class="line"><span class="function">    )</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.userDefaults <span class="operator">=</span> userDefaults</span><br><span class="line">        <span class="keyword">self</span>.decoder <span class="operator">=</span> decoder</span><br><span class="line">        <span class="keyword">self</span>.encoder <span class="operator">=</span> encoder</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">read</span>&lt;<span class="type">T</span>: <span class="type">Decodable</span>&gt;(<span class="keyword">_</span> <span class="params">key</span>: <span class="type">String</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">T</span>?, <span class="type">Error</span>&gt; &#123;</span><br><span class="line">        <span class="type">Just</span>(key)</span><br><span class="line">            .tryMap &#123; key -&gt; <span class="type">T</span>? <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> data <span class="operator">=</span> userDefaults.data(forKey: key) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">try</span> decoder.decode(<span class="type">T</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line">            &#125;.eraseToAnyPublisher()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">write</span>&lt;<span class="type">T</span>: <span class="type">Encodable</span>&gt;(<span class="keyword">_</span> <span class="params">key</span>: <span class="type">String</span>, <span class="params">value</span>: <span class="type">T</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Void</span>, <span class="type">Error</span>&gt; &#123;</span><br><span class="line">        <span class="type">Just</span>(())</span><br><span class="line">            .tryMap &#123; emptyValue -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">try</span> encoder.encode(value)</span><br><span class="line">                userDefaults.set(data, forKey: key)</span><br><span class="line">                <span class="keyword">return</span> emptyValue</span><br><span class="line">            &#125;.eraseToAnyPublisher()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">delete</span>(<span class="keyword">_</span> <span class="params">key</span>: <span class="type">String</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Void</span>, <span class="type">Error</span>&gt; &#123;</span><br><span class="line">        userDefaults.removeObject(forKey: key)</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Just</span>(()).setFailureType(to: <span class="type">Error</span>.<span class="keyword">self</span>).eraseToAnyPublisher()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Step4-we-will-build-a-StandardUserActionsManager-Class-and-make-the-final-encapsulation"><a href="#Step4-we-will-build-a-StandardUserActionsManager-Class-and-make-the-final-encapsulation" class="headerlink" title="Step4, we will build a StandardUserActionsManager Class, and make the final encapsulation."></a>Step4, we will build a <code>StandardUserActionsManager</code> Class, and make the final encapsulation.</h5><h6 id="A-we-will-define-a-UserActionsManager-protocol"><a href="#A-we-will-define-a-UserActionsManager-protocol" class="headerlink" title="A, we will define a UserActionsManager protocol"></a>A, we will define a <code>UserActionsManager</code> protocol</h6><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">UserActionsManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">writeToDefaults</span>&lt;<span class="type">T</span>: <span class="type">Encodable</span>&gt;(<span class="keyword">_</span> <span class="params">userAction</span>: <span class="type">UserAction</span>, <span class="params">value</span>: <span class="type">T</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Void</span>, <span class="type">Error</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">readFromDefaults</span>&lt;<span class="type">T</span>: <span class="type">Decodable</span>&gt;(<span class="keyword">_</span> <span class="params">userAction</span>: <span class="type">UserAction</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">T</span>?, <span class="type">Error</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeFromDefaults</span>(<span class="keyword">_</span> <span class="params">userAction</span>: <span class="type">UserAction</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Void</span>, <span class="type">Error</span>&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="B-lets-extend-UserDefaultStore-and-convenience-init-this-class-by-using-id-which-passed-from-customer-username-ID-or-the-standard-provided-by-systerm"><a href="#B-lets-extend-UserDefaultStore-and-convenience-init-this-class-by-using-id-which-passed-from-customer-username-ID-or-the-standard-provided-by-systerm" class="headerlink" title="B, lets extend UserDefaultStore, and convenience init this class by using id which passed from customer username ID or the .standard provided by systerm."></a>B, lets extend <code>UserDefaultStore</code>, and <code>convenience init</code> this class by using <code>id</code> which passed from customer username ID or the <code>.standard</code> provided by systerm.</h6><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">UserDefaultsStore</span> </span>&#123;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="function"><span class="keyword">init?</span>(</span></span><br><span class="line"><span class="function">        <span class="params">userId</span>: <span class="type">String</span>,</span></span><br><span class="line"><span class="function">        <span class="params">decoder</span>: <span class="type">JSONDecoder</span> <span class="operator">=</span> <span class="type">JSONDecoder</span>(),</span></span><br><span class="line"><span class="function">        <span class="params">encoder</span>: <span class="type">JSONEncoder</span> <span class="operator">=</span> <span class="type">JSONEncoder</span>()</span></span><br><span class="line"><span class="function">    )</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> customUserDefaults <span class="operator">=</span> <span class="type">UserDefaults</span>(suiteName: userId) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(</span><br><span class="line">            userDefaults: customUserDefaults,</span><br><span class="line">            decoder: decoder,</span><br><span class="line">            encoder: encoder</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">convenience</span> <span class="function"><span class="keyword">init</span>(</span></span><br><span class="line"><span class="function">        <span class="params">decoder</span>: <span class="type">JSONDecoder</span> <span class="operator">=</span> <span class="type">JSONDecoder</span>(),</span></span><br><span class="line"><span class="function">        <span class="params">encoder</span>: <span class="type">JSONEncoder</span> <span class="operator">=</span> <span class="type">JSONEncoder</span>()</span></span><br><span class="line"><span class="function">    )</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(</span><br><span class="line">            userDefaults: .standard,</span><br><span class="line">            decoder: decoder,</span><br><span class="line">            encoder: encoder</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="C-we-make-StandardUserActionsManager-to-conform-UserActionsManager-protocol"><a href="#C-we-make-StandardUserActionsManager-to-conform-UserActionsManager-protocol" class="headerlink" title="C, we make StandardUserActionsManager to conform UserActionsManager protocol."></a>C, we make <code>StandardUserActionsManager</code> to conform <code>UserActionsManager</code> protocol.</h6><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">UserActionsManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">writeToDefaults</span>&lt;<span class="type">T</span>: <span class="type">Encodable</span>&gt;(<span class="keyword">_</span> <span class="params">userAction</span>: <span class="type">UserAction</span>, <span class="params">value</span>: <span class="type">T</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Void</span>, <span class="type">Error</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">readFromDefaults</span>&lt;<span class="type">T</span>: <span class="type">Decodable</span>&gt;(<span class="keyword">_</span> <span class="params">userAction</span>: <span class="type">UserAction</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">T</span>?, <span class="type">Error</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeFromDefaults</span>(<span class="keyword">_</span> <span class="params">userAction</span>: <span class="type">UserAction</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Void</span>, <span class="type">Error</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardUserActionsManager</span>: <span class="title">UserActionsManager</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> userDefaultsStore: <span class="type">UserDefaultsStore</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> cancellabes <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">init</span>(</span></span><br><span class="line"><span class="function">        <span class="params">userDefaultsStore</span>: <span class="type">UserDefaultsStore</span></span></span><br><span class="line"><span class="function">    )</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.userDefaultsStore <span class="operator">=</span> userDefaultsStore</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">writeToDefaults</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> <span class="params">userAction</span>: <span class="type">UserAction</span>, <span class="params">value</span>: <span class="type">T</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Void</span>, <span class="type">Error</span>&gt; <span class="keyword">where</span> <span class="type">T</span> : <span class="type">Encodable</span> &#123;</span><br><span class="line">        userDefaultsStore</span><br><span class="line">            .write(userAction.name, value: value)</span><br><span class="line">            .eraseToAnyPublisher()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">readFromDefaults</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> <span class="params">userAction</span>: <span class="type">UserAction</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">T</span>?, <span class="type">Error</span>&gt; <span class="keyword">where</span> <span class="type">T</span> : <span class="type">Decodable</span> &#123;</span><br><span class="line">        userDefaultsStore</span><br><span class="line">            .read(userAction.name)</span><br><span class="line">            .eraseToAnyPublisher()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">removeFromDefaults</span>(<span class="keyword">_</span> <span class="params">userAction</span>: <span class="type">UserAction</span>)</span> -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Void</span>, <span class="type">Error</span>&gt; &#123;</span><br><span class="line">        userDefaultsStore</span><br><span class="line">            .delete(userAction.name)</span><br><span class="line">            .eraseToAnyPublisher()</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">UserDefaultsStore</span> </span>&#123;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="function"><span class="keyword">init?</span>(</span></span><br><span class="line"><span class="function">        <span class="params">userId</span>: <span class="type">String</span>,</span></span><br><span class="line"><span class="function">        <span class="params">decoder</span>: <span class="type">JSONDecoder</span> <span class="operator">=</span> <span class="type">JSONDecoder</span>(),</span></span><br><span class="line"><span class="function">        <span class="params">encoder</span>: <span class="type">JSONEncoder</span> <span class="operator">=</span> <span class="type">JSONEncoder</span>()</span></span><br><span class="line"><span class="function">    )</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> customUserDefaults <span class="operator">=</span> <span class="type">UserDefaults</span>(suiteName: userId) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(</span><br><span class="line">            userDefaults: customUserDefaults,</span><br><span class="line">            decoder: decoder,</span><br><span class="line">            encoder: encoder</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">convenience</span> <span class="function"><span class="keyword">init</span>(</span></span><br><span class="line"><span class="function">        <span class="params">decoder</span>: <span class="type">JSONDecoder</span> <span class="operator">=</span> <span class="type">JSONDecoder</span>(),</span></span><br><span class="line"><span class="function">        <span class="params">encoder</span>: <span class="type">JSONEncoder</span> <span class="operator">=</span> <span class="type">JSONEncoder</span>()</span></span><br><span class="line"><span class="function">    )</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(</span><br><span class="line">            userDefaults: .standard,</span><br><span class="line">            decoder: decoder,</span><br><span class="line">            encoder: encoder</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this way, our UserDefaults Utility is completed. When we introduce the function of storage and reading in the business, we directly instantiate this class to realize the requirements.</p><h4 id="Demo-Testing"><a href="#Demo-Testing" class="headerlink" title="Demo Testing:"></a>Demo Testing:</h4><p>After tapping the <code>=</code> sign here, a calculation result will be displayed. if we do not store and read defaults, when we exit the app, the result will obviously be cleared. After we finish storing and reading, the calculation result will still be displayed after opening the app.</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61c3fc72175c40aab279ce85d3a476f0~tplv-k3u1fbpfcp-watermark.image" alt="testUserDefaults.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Build a mature utility class can store &amp;amp; read &amp;amp; delete local cashed defaults.                           &lt;/p&gt;
&lt;h4 id=&quot;Preface：&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="Swift Utility Component" scheme="https://charlesongitee.gitee.io/charles-blog/categories/Swift-Utility-Component/"/>
    
    
  </entry>
  
</feed>
